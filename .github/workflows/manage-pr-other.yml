name: Manage Pull Requests

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  set-ci-values:
    name: set-ci-values
    runs-on: ubuntu-latest
    outputs:
      is_test_lint_set: ${{ steps.exec_check_job.outputs.is_test_lint_set }}
      is_test_scan_apex_set: ${{ steps.exec_check_job.outputs.is_test_scan_apex_set }}
      is_disable_SIT_set: ${{ steps.exec_check_job.outputs.is_disable_SIT_set }}
      is_disable_UAT_set: ${{ steps.exec_check_job.outputs.is_disable_UAT_set }}
      is_disable_PPR_set: ${{ steps.exec_check_job.outputs.is_disable_PPR_set }}
      is_disable_PROD_set: ${{ steps.exec_check_job.outputs.is_disable_PROD_set }}
    steps:
      - name: Check which actions should be executed
        id: exec_check_job
        env:
          CI_ENABLE: ${{ secrets.CI_ENABLE }}
          DISABLE_LINT: ${{ secrets.DISABLE_LINT }}
          DISABLE_TEST: ${{ secrets.DISABLE_TEST }}
          DISABLE_SCAN_TEST: ${{ secrets.DISABLE_SCAN_TEST }}
          DISABLE_SIT: ${{ secrets.DISABLE_SIT }}
          DISABLE_UAT: ${{ secrets.DISABLE_UAT }}
          DISABLE_PPR: ${{ secrets.DISABLE_PPR }}
          DISABLE_PROD: ${{ secrets.DISABLE_PROD }}
        run: |
          echo '::set-output name=is_test_lint_set::${{ env.CI_ENABLE == 1 && env.DISABLE_LINT != 1 && env.DISABLE_TEST != 1 }}'
          echo '::set-output name=is_test_scan_apex_set::${{ env.CI_ENABLE == 1 && env.DISABLE_SCAN_TEST != 1 && env.DISABLE_TEST != 1 }}'
          echo '::set-output name=is_disable_SIT_set::${{ env.CI_ENABLE == 1 && env.DISABLE_SIT == 1 }}'
          echo '::set-output name=is_disable_UAT_set::${{ env.CI_ENABLE == 1 && env.DISABLE_UAT == 1 }}'
          echo '::set-output name=is_disable_PPR_set::${{ env.CI_ENABLE == 1 && env.DISABLE_PPR == 1 }}'
          echo '::set-output name=is_disable_PROD_set::${{ env.CI_ENABLE == 1 && env.DISABLE_PROD == 1 }}'

  test-lint:
    name: test-lint
    needs: [set-ci-values]
    if: needs.set-ci-values.outputs.is_test_lint_set == 'true'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY2 }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-node@v2
          with:
            node-version: '12'
        - name: Setup
          run: ./scripts/github/before_script.sh
        - name: Lint
          run: |
            cidx source:lint

  test-scan-apex:
    name: test-scan-apex
    needs: [ set-ci-values ]
    if: needs.set-ci-values.outputs.is_test_scan_apex_set == 'true'
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY2 }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: actions/upload-artifact@v2
        with:
          name: test-scan-apex
          path: Artifact/*
      - name: Setup
        run: ./scripts/github/before_script.sh
      - name: Run Source Checks
        run: |
          echo base.ref ${{ github.event.pull_request.base.ref }}
          echo `ref: ${{ github.ref }}`
          echo GITHUB_BASE_REF $GITHUB_BASE_REF
          echo GITHUB_HEAD_REF $GITHUB_HEAD_REF
          npm install pmd-bin --global --loglevel=error
          cidx source:scan -@

  check_SIT:
    name: check_SIT
    # this job will only run if:
    # - the PR has been created, synchronized or reopened in the 'develop' branch,
    # - CI_ENABLE = true,
    # - DISABLE_SIT = false
    if: |
      github.base_ref == 'develop'  &&
      needs.set-ci-values.outputs.is_disable_SIT_set == 'false'
    needs: [test-lint, test-scan-apex, set-ci-values]
    env:
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY2 }}
      CI_JOB_TOKEN: ${{ secrets.CI_JOB_TOKEN }}
      AUTH_SIT_URL: ${{ secrets.AUTH_SIT_URL }}
      CI_UNITTEST_DISABLE: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: actions/upload-artifact@v2
        with:
          name: check_SIT
          path: Artifact/*
      - name: Setup
        run: ./scripts/github/before_script.sh
      - name: Deploy to SIT
        run: |
          cidx org:auth --alias=sit --url=${{env.AUTH_SIT_URL}}
          cat ./auth.url
          cidx org:deploy --alias=sit --incremental --cleanSequence=deploy.cleanSequence.json --artifact --notest=${{env.CI_UNITTEST_DISABLE}} --checkOnly=true
